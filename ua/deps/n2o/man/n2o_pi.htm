<!DOCTYPE html><html><head><meta charset="utf-8" /><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="description" content="" /><meta name="author" content="Maxim Sokhatsky" />
<title>PI</title>
<link rel="stylesheet" href="https://n2o.dev/blank.css"/>
<link rel="shortcut icon" type="image/x-icon" href="https://n2o.dev/img/favicon.ico"/>
<link rel="apple-touch-icon" sizes="180x180" href="https://n2o.dev/img/apple-touch-icon.png"/>
<link rel="icon" type="image/png" sizes="32x32" href="https://n2o.dev/img/favicon-32x32.png"/>
<link rel="icon" type="image/png" sizes="16x16" href="https://n2o.dev/img/favicon-16x16.png"/>
<link rel="manifest" href="https://n2o.dev/img/site.webmanifest"/>
</head><body><nav>
    <a href="https://n2o.dev/ua/">DEV</a>
    <a href="../index.html">N2O</a>
    <a href="#" style="background:#ededed;">PI</a>
  <div class="dropdown">
    <a onclick="drop()" class="dropbtn">UA</a>
    <div id="dropdown" class="dropdown-content">
      <a href="https://n2o.dev/ua/deps/n2o/man/n2o_pi.htm">UA</a>
      <a href="https://ws.n2o.dev/man/n2o_pi.htm">EN</a>
    </div>
  </div>
</nav><header>
    <a href="../index.html"><img src="https://n2o.dev/img/Synrc Neo.svg" /></a>
    <h1>PI</h1>
</header>
<main>
<article>
    <section>


<h3>ВСТУП</h3>

<p>Модуль <a href="https://github.com/synrc/n2o/blob/master/src/n2o_pi.erl">n2o_pi</a>
призначений для створення та відстеження контрольованих процесів у всіх додатках,
використовуючи будь-які ETS таблиці. Будь-який контрольований процес у N2O
створюється за допомогою n2o_pi, в тому числі: кільцеві віртуальні вузли, таймери, авторизація,
процеси веб-сторінок, тестові процеси та інші сервіси. Циклічний процес всередині протокольного обробника <b>info/2</b>
створює нові асинхронні процеси <b>proc/2</b> у випадку трудоємких операцій,
тому що обробник протоколу є критичним місцем, і його слід обробляти якомога швидше.</p>

    </section>
    <section>

<h3>CALLBACK</h3>

<h4>proc(term(),#pi{}) -> #ok{} | #reply{}.</h4>

<p><b>proc/2</b> — це колбек, який буде викликано при кожному
виклику <b>gen_server</b>'а: <b>handle_call</b>,
<b>handle_cast</b> і <b>handle_info</b>, його <b>init</b>
та <b>terminate</b>. Колбек повертає #ok як початковий стан процесу (який також є #pi{}),
або його відповідь на <b>gen_server:call/2</b> з новим станом, включеним в #reply.</p>

    </section>
    <section>

<h3>ПРИКЛАД</h3>

<p>Приклад буквальної реалізації таймера N2O, який позначає недійсними
відповідні записи в <b>кеш</b>-таблиці, яка використовується для змінних сесії.</p>

<figure><figcaption>Лістинг 1. Перевірка валідності кешу по таймеру</figcaption><code>
 proc(init,#pi{}=Async) ->
     {ok,Async#pi{state=timer(ping())}};

 proc({timer,ping},#pi{state=Timer}=Async) ->
     erlang:cancel_timer(Timer),
     io:format("n2o Timer: ~p\r~n",[ping]),
     n2o:invalidate_cache(caching),
     {reply,ok,Async#pi{state=timer_restart(ping())}}.

 timer(Diff) ->
     {X,Y,Z} = Diff,
     erlang:send_after(1000*(Z+60*Y+60*60*X),self(),{timer,ping}).

 ping() ->
     application:get_env(n2o,timer,{0,1,0}).

</code></figure>

<figure><figcaption>Лістинг 1. Перевірка валідності кешу по таймеру</figcaption><code>
 > n2o_pi:start(#pi{ module=n2o,
                     table=caching,
                     sup=n2o,
                     state=[],
                     name="timer"}).

</code></figure>

<p>Головне призначення <b>n2o_pi</b> — створювати такі процеси з
однієї функції <b>proc/2</b>, та відстежувати pid в ETS таблиці, які визначаються під час
ініціалізації процесу #pi{}.</p>

<figure><figcaption>Лістинг 2. Розуміння n2o_pi</figcaption><code>
 1> supervisor:which_children(n2o).
 [{{ring,4},&#60;0.1661.0&#62;,worker,[n2o_mqtt]},
  {{ring,3},&#60;0.1655.0&#62;,worker,[n2o_mqtt]},
  {{ring,2},&#60;0.1653.0&#62;,worker,[n2o_mqtt]},
  {{ring,1},&#60;0.1651.0v,worker,[n2o_mqtt]},
  {{caching,"timer"},&#60;0.1604.0&#62;,worker,[n2o]}]

 2> ets:tab2list(ring).
 [{{ring,4},infinity,&#60;0.1661.0&#62;},
 {{ring,1},infinity,&#60;0.1651.0&#62;},
 {{ring,2},infinity,&#60;0.1653.0&#62;},
 {{ring,3},infinity,&#60;0.1655.0&#62;}]

 3> ets:tab2list(caching).
 [{{caching,"timer"},infinity,&#60;0.1604.0&#62;}]

 4> n2o_pi:send(caching,"timer",{timer,ping}).
 n2o Timer: ping
 ok

 5> n2o_pi:pid(caching,"timer").
 &#60;0.1604.0&#62;
</code></figure>

    </section>
    <section>

<h3>Записи (Records)</h3>

<p>Кожен процес керується його протоколом, який насправді є сукупністю повідомлень протоколу.
Хоча n2o_pi загалом не обмежує повідомлення протоколу,
однак він визначає тип стану процесу, запис #pi{}.</p>

<figure><figcaption>Лістинг 3. Erlang/OTP Records</figcaption><code>
      #ok { code = [] :: [] | #pi{} }.

   #error { code = [] :: [] | term() }.

   #reply { data = [] :: [] | term() ,
            code = [] :: [] | #pi{} }.

</code></figure>

<p>По замовчуванню, в N2O кожне поле повідомлення протоколу повинно бути [].</p>

<figure><figcaption>Лістинг 4. N2O Records</figcaption><code>
 -record(pi, { name     :: atom(),
               table    :: ets:tid(),
               sup      :: atom(),
               module   :: atom(),
               state    :: term()  }).

</code></figure>

<ul><li>name — ім'я процесу, ключ у контрольованому ланцюжку.</li><li>module — назва модуля, в якому розміщено <b>proc/2</b>.</li><li>table — назва ETS таблиці, де зберігається кеш pids.</li><li>sup — додаток, в якому буде створено контрольовані процеси.</li><li>state — стан запущеного контрольованого процесу.</li></ul>

    </section>
    <section>

<h3>API</h3>

<h4>start(#pi{}) -> {pid(),term()} | #error{}.</h4>

<p>Запускає функцію <b>proc/2</b> всередині контрольованого процесу.</p>

<h4>stop(Class,Name) -> #pi{} | #error{}.</h4>

<p>Зупиняє спостереження за процесом та вбиває цей процес.</p>

<h4>restart(Class,Name) -> {pid(),term()} | #error{} | #pi{}.</h4>

<p>Пробує завершити процес. У разу успіху запускає новий, інакше повертає помилку.</p>

<h4>send(Class,Name,term()) -> term(). </h4>

<p>Надсилає повідомлення, отримане з таблиці Class з ключем Name, <b>gen_call</b> на обробку.
Повертає відповідь <b>gen_server:call</b>.</p>


<h4>pid(Class,Name) -> pid(). </h4>

<p>Повертає pid, який зберігався під час ініціалізації процесу в таблиці Class з ключем Name.</p>

<figure><figcaption>Лістинг 5. Сумісність з gen_server.</figcaption><code>
 1> n2o_pi:pid(caching,"timer") 
                 ! {timer,ping}.
 n2o Timer: ping
 {timer,ping}

 2> n2o_pi:send(caching,"timer",
                   {timer,ping}).
 n2o Timer: ping
 ok

 3> gen_server:call(
    n2o_pi:pid(caching,"timer"),
                  {timer,ping}).
 n2o Timer: ping
 ok

</code></figure>

    </section>
    <section>

<p>Цей модуль може бути пов'язаним з:
<b>
<a href="n2o.htm">n2o</a></b>,
<a href="n2o_proto.htm">n2o_proto</a>,
<a href="n2o_mqtt.htm">n2o_mqtt</a>.
</p>

    </section>
</article>
</main><footer>
    2005—2019 © Synrc Research Center
</footer>
<script>function drop(){document.getElementById("dropdown").classList.toggle("show");}</script>
</body></html>
