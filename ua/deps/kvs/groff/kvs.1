.TH kvs 1 "kvs" "Synrc Research Center" "KVS"
.SH NAME
kvs

.SH ВСТУП
.LP
Модуль KVS надає інтерфейс користувача для команд консолі.
Він має функції відкриття, маніпулювання даними та відновлення даних.
Під капотом він обробляє налаштовувані під час виконання бекенди для кожної підтримуваної бази даних.
.LP
.LP
\fIdir/0\fR\& — повертає перелік таблиць.
\fIver/0\fR\& — повертає версію KVS.
\fIseq/2\fR\& — генерує новий ідентифікатор послідовностей таблиці.
\fIcount/1\fR\& — повертає кількість записів в таблиці.
\fIput/1\fR\& — зберігає запис, використовуючи id як ключ.
\fIget/2\fR\& — повертає запис по його ключу.
\fIdelete/1\fR\& — видаляє запис з таблиці.
\fIindex/3\fR\& — виконує пошук записів по назві поля та його значенню.
.LP
Ви можете поміняти бекенд, використовуючи змінні оточення env в налаштуваннях додатку.
Це добре працює навіть під великим навантаженням.

.SH ВСТАНОВЛЕННЯ
.LP
В sys.config ви вказуєте kvs бекенд та список модулів, які містять експорт
функції
metainfo/0
.
.nf
[{kvs, [{dba,store_mnesia},
{schema,[kvs,kvs_stream]}]}].
.fi
dir() -> list({'table',atom()}).
.LP
Повертає актуальні таблиці.
ver() -> {'version',string()}.
.LP
Повертає версію бекенда.
dump() -> ok.
.LP
Повертає інформацію про базу даних.
.nf
> kvs:dump().
NAME                     STORAGE TYPE    MEMORY (MB)   ELEMENTS
id_seq                      disc_copies           0.00          0
writer                      disc_copies           0.00          0
emails                      disc_copies           0.00          0
reader                      disc_copies           0.00          0
Snapshot taken: {{2018,11,10},{5,2,38}}
ok
.fi

.SH SEQ
.LP
Таблиця послідовностей id_seq зберігає лічильники для записів.
Лічильники є глобальними та атомарними для кожної підтримуваної бази даних.
Послідовності використовуються для генерації унікальних імен записам в розподіленій таблиці.
Якщо імена в таблиці не є унікальними,
то функція count може повернути значення, що відрізняється від поточної послідовності.
.nf
-record(id_seq, { thing = atom(),
id    = 0 :: integer() } ).
.fi
seq(atom(), integer()) -> integer().
.LP
Збільшує на 1 та повертає id лічильника для конкретної таблиці.
count(atom()) -> integer().
.LP
Повертає кількість записів в таблиці.

.SH BACKEND
.LP
Функції операцій з даними.
put(tuple()) -> ok | {error,any()}.
.LP
Зберігає запис.
get(atom(),any()) -> {ok,any()} | {error, not_found | duplicated }.
.LP
Виконує пошук запису.
delete(atom(),any()) -> ok | {error,any()}.
.LP
Видаляє запис.
index(atom(),any(),any()) -> list(tuple()).
.LP
Виконує пошук запису за індексованим полем та заданим значенням.

.SH ALSO
.L